// Python functions, public APIs
! version = 2.0


// Search commands
+ search duck duck [for] *
- Contacting duck duck go, here it the result. <call>function duckDuck <star></call>

+ tell me about *
- Checking Wikipedia for <star>: <call>function wikiPedia <star></call> Was that what you wanted?

+ search wikipedia [for] *
- Contacting Wikipedia. <call>function wikiPedia <star></call> Wikipedia has lots of information.

+ (find|look up) [the] movie *
- Will do. <call>function omdb <star></call> Lights, camera action!

+ (find|look up) [the] show *
- Sure thing. <call>function omdb <star></call> Lights, camera action!

+ define *
- Looking through the word net database.<call>function definition <star></call> . It is always good to learn things.


// Words, Quotes, Facts, Jokes, Riddles
+ [what] rhymes with *
- That is a good question, I will ask rhymebrain.com. Here are all the words that rhyme with <star>. <call>function rhymeBrain <star></call> Did that work for you?

+ [*] (oblique|obliques) (strategies|strategy)
- Here is one from Oblique Strategies. <call>function obliqueStrategies</call> . Now get working!

+ [*] (strategy|productive) [ideas|idea]
- Here is one from Oblique Strategies. <call>function obliqueStrategies</call> . Now get working!

+ [*] (motivate|inspire) me [*]
- Here is an inspiring expression. <call>function inspireMe</call> Did that inspire you?

+ [*] (make me think|life mysteries) [*]
- Here is a life's mystery. <call>function imponderables</call> Do you know the answer to that?

+ [*] imponderables [*]
- Here is a life's mystery. <call>function imponderables</call> Do you know the answer to that?

+ [*] cat (fact|facts) [*]
- Here is a cat fact for you. <call>function catFacts</call> I bet you didn't know that, meow.

+ [*] random quote [*]
- Sure thing, quotesdaddy.com has lots of quotes. <call>function randomQuote</call>  I hope you liked that quote.

+ [*] random fact [*]
- Let me find some thing interesting. <call>function randomFacts</call>  What did you think of that fact?

+ [*] tell me [a] joke [*]
- Okay, here goes. <call>function randomJoke</call> Ha Ha.
- knock knock

+ [*] tell me [a] riddle [*]
- Okay, all the riddles have a one word answer. <call>function randomRiddle</call> Now if you don't know the answer, say give up. Are you ready? {topic=riddleMe}


//Miscellaneous commands
+ [*] major (earthquake|earthquakes|quakes) [*]
- I will look that up. <call>function earthQuake major</call>. These were the 5 most recent 6.0 magnitude or greater earthquakes.

+ [*] local (earthquake|earthquakes|quakes) [*]
- I will look that up. <call>function earthQuake local</call>. Those were the 5 most recent earthquakes around your area.

+ [*] exchange rate [*]
- Getting the current yen dollar exchange rate. <call>function exchangeRate 1</call>. Are you ready to spend some money?

+ how much is # yen
- Making the calculations right now. <call>function exchangeRate <star></call>. I hope the info was helpful.

+ [*] stock report [*]
- I need to call my broker, just a moment. <call>function stockReport</call>  . I hope you invested wisely.

+ [*] space launch [*]
- Looking up the next space launch, here it is. <call>function spaceLaunch</call> . That reminds me of the quote, Space the final frontier!

+ [*] people in space [*]
- Getting out my telescope, I see that, <call>function spacePeople</call> Can you imagine living in space?

+ [*] the moon [*]
- Looking at the moon. <call>function moonInfo</call> It is always relaxing to see the moon.


//Handles the riddle conversation.
> topic riddleMe

+ (repeat|say again)
- <get riddle>

+ (giveup|done|i do not know)
- I guess that riddle was hard. The answer was <get answer> So what's next? {topic=random}

+ *
% * are you ready
- Here is a riddle for you. <get riddle>

+ *
* <star> == <get answer> => You got the riddle. So what's next? {topic=random}
- Nope, think about it, you'll figure it out.

< topic


> object function python
    import csv
    import datetime
    import duckduckgo
    import json
    import random
    import re
    import time
    import urllib2
    from xml.etree import ElementTree
    from xml.dom import minidom
    from bs4 import BeautifulSoup
    import wikipedia
    import sys
    reload(sys)
    sys.setdefaultencoding('utf-8')

    command = " ".join(args)
    parts = command.split(" ")

    def catFacts():
        url = "http://catfacts-api.appspot.com/api/facts?number=1"
        response = urllib2.urlopen(url)
        data = dict(json.loads(response.read()))
        response = str(data['facts'])
        catFacts = response.replace("'","").replace("[u","").replace("]","")
        return catFacts


    def definition(query):
        url = "http://chriscargile.com/dictionary/json/"+query
        response = urllib2.urlopen(url)
        try:
            data = dict(json.loads(response.read()))
            getData = data['instances'][0]['definition']
            definition = "The definition for " + query + " is " + getData
        except:
            definition = "Sorry the word " + query + " was not found in dictionary"
        return definition


    def duckDuck(query):
        try:
          answer=duckduckgo.get_zci(query,safesearch=False)
        except:
          return "I am having trouble searching it, try something else."
        answer=answer.split('(')[0]

        if("..." in answer):
            answer = answer + "wait! Are you testing me?!?!"
        if('http' in answer):
            answer = "Sorry all I could get was a link for your request. Do you want to try something else?"
        else:
            answer = answer + "  <break time='500ms'/> I hope that answered your question."
        return answer


    def earthQuake(type):
        if type == "local":
            url = "https://raw.githubusercontent.com/ekt1701/Alexa-Chatter/master/data/startup.csv"
            response = urllib2.urlopen(url)
            cr = csv.reader(response)
            row=[]
            for row in cr:
                if cr.line_num == 1:
                    lat = row[1]
                    lon = row[2]
            url = "http://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&eventtype=earthquake&latitude="+lat+"&longitude="+lon+"&maxradiuskm=50"
        else:
            url = "http://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&eventtype=earthquake&minmagnitude=6"
        earthquakes = []
        response = urllib2.urlopen(url)
        data = dict(json.loads(response.read()))
        for event in data['features'][0:5]:
            mag = event['properties']['mag']
            place = event['properties']['place']
            time = event['properties']['time']
            date = datetime.datetime.fromtimestamp(time/1000.0).strftime('%B %d at %I:%M %p')
            eventSum = "A "+str(mag)+" magnitude earthquake occured "+str(place)+" on "+str(date)
            earthquakes.append(eventSum)
        earthQuake = " <break time='500ms'/>  ".join(earthquakes)
        return earthQuake


    def exchangeRate(amt):
        url = "http://api.fixer.io/latest?base=USD&symbols=JPY"
        response = urllib2.urlopen(url)
        rates = dict(json.loads(response.read()))
        exchangeRate = rates["rates"]["JPY"]
        if int(amt) > 10:
            dollarRate = int(amt)/exchangeRate
            dollarRate = round(dollarRate,2)
            exchangeRate = str(amt) +  " yen equals " + str(dollarRate) + " dollars."
        else:
            exchangeRate = "Today 1 dollar equals " + str(exchangeRate) + " yen."
        return exchangeRate


    def imponderables():
        url = "https://raw.githubusercontent.com/ScientificPotato/Alexa-Chatter/master/data/imponderables.txt"
        response = urllib2.urlopen(url).read()
        text = eval(response)
        imponderables = str(text[random.randint(0,98)])
        return imponderables


    def inspireMe():
        url = "http://api.forismatic.com/api/1.0/?method=getQuote&lang=en&format=json"
        response = urllib2.urlopen(url)
        data = dict(json.loads(response.read()))
        text = data['quoteText']
        inspireMe = re.sub( '\s+', ' ', text ).strip()
        inspireMe = inspireMe + " <break time='1s'/> "
        return inspireMe


    def moonInfo():
        url = "http://api.burningsoul.in/moon"
        response = urllib2.urlopen(url)
        data = dict(json.loads(response.read()))
        moonphase = data['stage']
        moonillumination = data['illumination']
        moonillumination = str(moonillumination)
        illumationpercent,splitB = moonillumination.split(".")
        fullmoon = data['FM']['UT']
        newmoon = data['NNM']['UT']
        fmDate = datetime.datetime.fromtimestamp(fullmoon).strftime('%B %d %Y')
        nmDate = datetime.datetime.fromtimestamp(newmoon).strftime('%B %d %Y')
        moonInfo = "The current phase is " + moonphase + ". Illumination is at " + illumationpercent + " percent. Full moon will occur on " + fmDate + " New moon will occur on " + nmDate
        return moonInfo


    def obliqueStrategies():
        number = random.randint(1,4)
        url = "http://brianeno.needsyourhelp.org/edition/"+str(number)+"/draw"
        response = urllib2.urlopen(url)
        try:
            info = dict(json.loads(response.read()))
            obliqueStrategies = info["strategy"]
            obliqueStrategies = obliqueStrategies.replace(" & "," and ")
        except:
            obliqueStrategies = "We either make ourselves miserable, or we make ourselves happy. The amount of work is the same."
        return obliqueStrategies


    def omdb(name):
        name=name.replace(" ","%20")
        url = "http://www.omdbapi.com/?t="+name+"&y=&plot=full&r=json"
        response = urllib2.urlopen(url)
        data = dict(json.loads(response.read()))
        if data['Response'] == "True":
            plot = data['Plot']
            name=name.replace("%20"," ")
            ombd = "Here is the plot for " +name+ " " +plot
        else:
            name=name.replace("%20"," ")
            ombd = name + " was pretty cool."
        return ombd


    def randomFacts():
        url = "https://raw.githubusercontent.com/ScientificPotato/Alexa-Chatter/master/data/facts.txt"
        response = urllib2.urlopen(url).read()
        text = eval(response)
        randomFacts = str(text[random.randint(0,63)])
        return randomFacts


    def randomJoke():
        i = random.randint(0,9)
        if i < 5:
            url = "http://api.icndb.com/jokes/random"
            response = urllib2.urlopen(url)
            data = dict(json.loads(response.read()))
            randomJoke = data['value']['joke']
        else:
            url = "http://tambal.azurewebsites.net/joke/random"
            response = urllib2.urlopen(url)
            data = dict(json.loads(response.read()))
            randomJoke = data['joke']
        return randomJoke


    def randomQuote():
        randomwords = ['positive', 'funny', 'inspiration', 'nature', 'courage', 'laugh', 'tech', 'exercise', 'health', 'fitness', 'laughter', 'silly', 'sunny', 'happy', 'cheerful', 'animals', 'friendship', 'success', 'patience', 'love', 'peace']
        randomstring = str(randomwords[random.randint(0,20)])
        url = "https://www.quotesdaddy.com/feed/tagged/"+randomstring
        req = urllib2.Request(url, headers={'User-Agent' : "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/534.30 (KHTML, like Gecko) Ubuntu/11.04 Chromium/12.0.742.112 Chrome/12.0.742.112 Safari/534.30"})
        xml = urllib2.urlopen(req).read()
        tree = ElementTree.fromstring(xml)
        for item in tree.findall('.//item'):
            for title in item.findall('.//title'):
                quote = title.text
        randomQuote = "Here is one based on " +randomstring+ " <break time='500ms'/>  " + quote + " <break time='1s'/> "
        return randomQuote


    def randomRiddle():
        uid   = rs.current_user()
        var = "riddle"
        var1 = "answer"
        url = urllib2.urlopen('https://raw.githubusercontent.com/ekt1701/Alexa-Chatter/master/data/riddles.json')
        json_string = url.read()
        parsed_json = json.loads(json_string)
        num = random.randint(0,108)
        riddle = parsed_json[num]['q']
        answer = parsed_json[num]['a']
        answer = answer.lower()
        rs.set_uservar(uid, var, riddle)
        rs.set_uservar(uid, var1, answer)
        return


    def rhymeBrain(word):
        url = "http://rhymebrain.com/talk?function=getRhymes&word="+word
        response = urllib2.urlopen(url)
        data = json.loads(response.read())
        i = 0
        rhymes =[]
        for i in xrange(0, 9):
            words = data[i]['word']
            rhymes.append(words)

        rhymeBrain=", ".join(rhymes)
        return rhymeBrain


    def spaceLaunch():
        url = "https://launchlibrary.net/1.2/launch/next/1"
        response = urllib2.urlopen(url)
        data = dict(json.loads(response.read()))
        date = data['launches'][0]['net']
        description = data['launches'][0]['missions'][0]['description']
        description = description.replace(" & "," and ")
        spaceLaunch = description + " It is scheduled for " + date
        return spaceLaunch


    def spacePeople():
        url = "http://api.open-notify.org/astros.json"
        response = urllib2.urlopen(url)
        data = dict(json.loads(response.read()))
        numberSpace = data['number']
        spacePeople = "Currently there are " + str(numberSpace) + " persons in space."
        return spacePeople


    def stockReport():
        url = "https://raw.githubusercontent.com/ScientificPotato/Alexa-Chatter/master/data/startup.csv"
        response = urllib2.urlopen(url)
        cr = csv.reader(response)
        for data in cr:
            if cr.line_num == 5:
                stocklist = data
            if cr.line_num == 6:
                names = data
        index = 1
        myreport = []
        while index<len(stocklist):
            url = "http://www.nasdaq.com/aspxcontent/NasdaqRSS.aspx?data=quotes&symbol="+stocklist[index]
            req = urllib2.Request(url, headers={'User-Agent' : "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/534.30 (KHTML, like Gecko) Ubuntu/11.04 Chromium/12.0.742.112 Chrome/12.0.742.112 Safari/534.30"})
            xml = urllib2.urlopen(req).read()
            getData = []
            getStock = minidom.parseString(xml).getElementsByTagName('item')
            for item in getStock:
                getData = item.getElementsByTagName('description')[0].firstChild.wholeText
            getData = getData.split()
            price = getData[24].replace('width="50%">','')
            change = getData[37].replace('color="green">','').replace('<img','').replace('color="red">','')
            amount = getData[39].replace('>','').replace('</font&nbsp;','')
            stockreport = "The price for " + names[index] + " is " + price + " the change is " + change + amount
            myreport.append(stockreport)
            index += 1
        stockReport = '. '.join(myreport)
        return stockReport

    def wikiPedia(query):
        try:
            text = str(wikipedia.summary(query))
            text = text.replace("&"," and ").replace(" & "," and ")
            wikiPedia = re.sub( '\s+', ' ', text ).strip()
        except wikipedia.exceptions.DisambiguationError as e:
            errorMes = e.options
            error = ', '.join(errorMes)
            wikiPedia = "There was an error, which one do you want: " + error
        except:
            wikiPedia = "I'm sorry there was an error with your request for " + query + "What else shall we try?"
        return wikiPedia



    if parts[0] == "catFacts":
        results = catFacts()
    elif parts[0] == "definition":
        results = definition(" ".join(parts[1:]))
    elif parts[0] == "duckDuck":
        results = duckDuck(" ".join(parts[1:]))
    elif parts[0] == "exchangeRate":
        results = exchangeRate(" ".join(parts[1:]))
    elif parts[0] == "earthQuake":
        results = earthQuake(" ".join(parts[1:]))
    elif parts[0] == "imponderables":
        results = imponderables()
    elif parts[0] == "inspireMe":
        results = inspireMe()
    elif parts[0] == "moonInfo":
        results = moonInfo()
    elif parts[0] == "obliqueStrategies":
        results = obliqueStrategies()
    elif parts[0] == "omdb":
        results = omdb(" ".join(parts[1:]))
    elif parts[0] == "randomFacts":
        results = randomFacts()
    elif parts[0] == "randomJoke":
        results = randomJoke()
    elif parts[0] == "randomQuote":
        results = randomQuote()
    elif parts[0] == "randomRiddle":
        results = randomRiddle()
    elif parts[0] == "rhymeBrain":
        results = rhymeBrain(" ".join(parts[1:]))
    elif parts[0] == "spaceLaunch":
        results = spaceLaunch()
    elif parts[0] == "spacePeople":
        results = spacePeople()
    elif parts[0] == "stockReport":
        results = stockReport()
    elif parts[0] == "wikiPedia":
        results = wikiPedia(" ".join(parts[1:]))

    return results
< object
